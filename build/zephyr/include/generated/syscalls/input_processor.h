/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_INPUT_PROCESSOR_H
#define Z_INCLUDE_SYSCALLS_INPUT_PROCESSOR_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_zmk_input_processor_handle_event(const struct device * dev, struct input_event * event, uint32_t param1, uint32_t param2, struct zmk_input_processor_state * state);

__pinned_func
static inline int zmk_input_processor_handle_event(const struct device * dev, struct input_event * event, uint32_t param1, uint32_t param2, struct zmk_input_processor_state * state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; struct input_event * val; } parm1 = { .val = event };
		union { uintptr_t x; uint32_t val; } parm2 = { .val = param1 };
		union { uintptr_t x; uint32_t val; } parm3 = { .val = param2 };
		union { uintptr_t x; struct zmk_input_processor_state * val; } parm4 = { .val = state };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZMK_INPUT_PROCESSOR_HANDLE_EVENT);
	}
#endif
	compiler_barrier();
	return z_impl_zmk_input_processor_handle_event(dev, event, param1, param2, state);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define zmk_input_processor_handle_event(dev, event, param1, param2, state) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_ZMK_INPUT_PROCESSOR_HANDLE_EVENT, zmk_input_processor_handle_event, dev, event, param1, param2, state); 	syscall__retval = zmk_input_processor_handle_event(dev, event, param1, param2, state); 	sys_port_trace_syscall_exit(K_SYSCALL_ZMK_INPUT_PROCESSOR_HANDLE_EVENT, zmk_input_processor_handle_event, dev, event, param1, param2, state, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
